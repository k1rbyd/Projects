import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;

public class Controller {
    private static final String HOST = "localhost";
    private static final String USER = "root";
    private static final String PASS = "Qwerty#80085";
    private static final String DATABASE_NAME = "PROJECT2";
    private Model model;
    private View view;
    private Connection conn;
    private String[] columnNames = {"Market", "Available Quantity", "Price"};

    public Controller(Model model, View view, Connection conn) {
        this.model = model;
        this.view = view;
        this.conn = conn;

        view.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performAction();
            }
        });
    }

    private void performAction() {
        String selectedOption = view.getSelectedOption();
        String productName = view.getProductInput();
        String result = "";

        try {
            switch (selectedOption) {
                case "Buy Products":
                    result = buyProducts(productName);
                    break;
                case "Sell Products":
                    result = sellProducts(productName);
                    break;
                default:
                    result = "Invalid option.";
            }
        } catch (SQLException e) {
            result = "Database error: " + e.getMessage();
        }

        view.setOutputText(result);
    }

    private String buyProducts(String productName) throws SQLException {
        String[] markets = {"market1", "market2", "market3"};
        Map<String, Integer> marketInfo = new HashMap<>();

        for (String market : markets) {
            int availableQuantity = model.displayMarketInfo(conn, market, productName);

            if (availableQuantity > 0) {
                marketInfo.put(market, availableQuantity);
            }
        }

        if (marketInfo.isEmpty()) {
            return "The product is not available in any market.";
        }

        Object[][] tableData = new Object[marketInfo.size()][3];
        int rowIndex = 0;
        for (Map.Entry<String, Integer> entry : marketInfo.entrySet()) {
            String market = entry.getKey();
            int availableQuantity = entry.getValue();
            int price = getPriceForProduct(productName);
            tableData[rowIndex] = new Object[]{market, availableQuantity, price};
            rowIndex++;
        }

        view.setOutputTableData(tableData);
        return ""; // Return an empty string for successful processing
    }

    private String sellProducts(String productName) throws SQLException {
        String[] markets = {"market1", "market2", "market3"};
        Map<String, Integer> marketInfo = new HashMap<>();

        for (String market : markets) {
            int availableQuantity = model.displayMarketInfo(conn, market, productName);

            if (availableQuantity > 0) {
                marketInfo.put(market, availableQuantity);
            }
        }

        if (marketInfo.isEmpty()) {
            return "You cannot sell the product to any market.";
        }

        Object[][] tableData = new Object[marketInfo.size()][3];
        int rowIndex = 0;
        for (Map.Entry<String, Integer> entry : marketInfo.entrySet()) {
            String market = entry.getKey();
            int availableQuantity = entry.getValue();
            int price = getPriceForProduct(productName);
            tableData[rowIndex] = new Object[]{market, availableQuantity, price};
            rowIndex++;
        }

        view.setOutputTableData(tableData);
        return ""; // Return an empty string for successful processing
    }

    private int getPriceForProduct(String productName) throws SQLException {
        int price = 0;

        // Define your database connection URL, username, and password
        String dbUrl = "jdbc:mysql://" + HOST + ":3306/" + DATABASE_NAME;
        String dbUser = USER;
        String dbPass = PASS;

        // Define the SQL query to retrieve the price for the given product
        String query = "SELECT price FROM products WHERE product_name = ?";

        try (Connection connection = DriverManager.getConnection(dbUrl, dbUser, dbPass);
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {

            // Set the product name as a parameter in the prepared statement
            preparedStatement.setString(1, productName);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    // Retrieve the price from the result set
                    price = resultSet.getInt("price");
                }
            }
        } catch (SQLException e) {
            // Handle any database-related errors here
            System.err.println("Error fetching product price: " + e.getMessage());
            throw e; // Re-throw the exception to handle it in the caller
        }

        return price;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                Model model = new Model();
                View view = new View();

                try {
                    Connection conn = model.getConnection();
                    Controller controller = new Controller(model, view, conn);
                    view.addActionListener(controller);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        });
    }
}
