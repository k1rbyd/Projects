import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class MarketApp {
    private static final String HOST = "localhost";
    private static final String USER = "root";
    private static final String PASS = "Qwerty#80085";
    private static final String DATABASE_NAME = "PROJECT2";

    private Connection conn;
    private JTextArea quantityTextArea;
    private JTextArea outputTextArea; // Initialize outputTextArea here

    private JFrame frame;
    private JComboBox<String> actionComboBox;
    private JTextField productTextField;
    private JComboBox<String> marketComboBox;
    private JTextField quantityTextField;

    private boolean isBuying;

    public MarketApp() {
        initDatabaseConnection();
        initGUI();
    }

    private void initGUI() {
        frame = new JFrame("Market App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 350);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JPanel topPanel = new JPanel(new GridLayout(6, 2));
        JLabel actionLabel = new JLabel("Select an action:");
        String[] actions = {"Buy", "Sell"};
        actionComboBox = new JComboBox<>(actions);

        JLabel productLabel = new JLabel("Enter product name:");
        productTextField = new JTextField();

        JLabel marketLabel = new JLabel("Select a market:");
        marketComboBox = new JComboBox<>(getAvailableMarkets());

        JLabel quantityLabel = new JLabel("Enter quantity:");
        quantityTextField = new JTextField();

        JLabel availableQuantitiesLabel = new JLabel("Available Quantities:");
        quantityTextArea = new JTextArea();
        quantityTextArea.setEditable(false);

        JButton executeButton = new JButton("Execute Transaction");
        JButton checkAvailabilityButton = new JButton("Check Product Availability");
        JButton checkPriceButton = new JButton("Check Product Price");
        JButton checkMarketButton = new JButton("Check Product Market");
        JButton checkQuantityButton = new JButton("Check Product Quantity");
        JButton checkStockButton = new JButton("Check Market Stock");

        JPanel buttonPanel = new JPanel(new GridLayout(2, 3));
        buttonPanel.add(checkAvailabilityButton);
        buttonPanel.add(checkPriceButton);
        buttonPanel.add(checkMarketButton);
        buttonPanel.add(checkQuantityButton);
        buttonPanel.add(checkStockButton);

        topPanel.add(actionLabel);
        topPanel.add(actionComboBox);
        topPanel.add(productLabel);
        topPanel.add(productTextField);
        topPanel.add(marketLabel);
        topPanel.add(marketComboBox);
        topPanel.add(quantityLabel);
        topPanel.add(quantityTextField);
        topPanel.add(availableQuantitiesLabel);
        topPanel.add(quantityTextArea);
        topPanel.add(executeButton);

        mainPanel.add(topPanel, BorderLayout.NORTH);
        mainPanel.add(buttonPanel, BorderLayout.CENTER);

        // Initialize outputTextArea
        outputTextArea = new JTextArea();
        outputTextArea.setEditable(false);
        mainPanel.add(outputTextArea, BorderLayout.SOUTH);

        frame.add(mainPanel);

        actionComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedAction = actionComboBox.getSelectedItem().toString();
                if ("Buy".equals(selectedAction)) {
                    isBuying = true;
                    marketComboBox.setEnabled(false);
                } else if ("Sell".equals(selectedAction)) {
                    isBuying = false;
                    marketComboBox.setEnabled(true);
                }
            }
        });

        executeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String productName = productTextField.getText();
                String selectedMarket = marketComboBox.getSelectedItem().toString();
                int quantity = Integer.parseInt(quantityTextField.getText());

                if (isBuying) {
                    processBuyRequest(productName, quantity, selectedMarket);
                } else {
                    processSellRequest(productName, quantity, selectedMarket);
                }
            }
        });

        checkAvailabilityButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String productName = productTextField.getText();
                String selectedMarket = marketComboBox.getSelectedItem().toString();
                checkAvailability(productName, selectedMarket);
            }
        });

        checkPriceButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String productName = productTextField.getText();
                String selectedMarket = marketComboBox.getSelectedItem().toString();
                checkPrice(productName, selectedMarket);
            }
        });

        checkMarketButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String productName = productTextField.getText();
                String selectedMarket = marketComboBox.getSelectedItem().toString();
                checkMarket(productName, selectedMarket);
            }
        });

        checkQuantityButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String productName = productTextField.getText();
                String selectedMarket = marketComboBox.getSelectedItem().toString();
                checkQuantity(productName, selectedMarket);
            }
        });

        checkStockButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedMarket = marketComboBox.getSelectedItem().toString();
                checkStock(selectedMarket);
            }
        });

        frame.setVisible(true);
    }

    private void initDatabaseConnection() {
        try {
            conn = DriverManager.getConnection("jdbc:mysql://" + HOST + ":3306/" + DATABASE_NAME, USER, PASS);
        } catch (SQLException e) {
            e.printStackTrace();
            System.err.println("Database connection error: " + e.getMessage());
            System.exit(1);
        }
    }

    private String[] getAvailableMarkets() {
        List<String> markets = new ArrayList<>();
        String[] allMarkets = {"market1", "market2", "market3"};

        for (String market : allMarkets) {
            if (isMarketAvailable(market)) {
                markets.add(market);
            }
        }
        return markets.toArray(new String[0]);
    }

    private boolean isMarketAvailable(String market) {
        String query = "SELECT * FROM " + market;
        try (PreparedStatement ps = conn.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {
            return rs.next();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void updateAvailableQuantities(String selectedMarket) {
        String query = "SELECT productname, quantity FROM " + selectedMarket;
        StringBuilder quantitiesText = new StringBuilder();

        try (PreparedStatement ps = conn.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                String productName = rs.getString("productname");
                int quantity = rs.getInt("quantity");
                quantitiesText.append(productName).append(": ").append(quantity).append("\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            quantitiesText.append("Error fetching quantities: ").append(e.getMessage());
        }

        quantityTextArea.setText(quantitiesText.toString());
    }

    private void processBuyRequest(String productName, int quantity, String selectedMarket) {
        int availableQuantity = 0;
        int price = 0;
        String query = "SELECT quantity, price FROM " + selectedMarket + " WHERE productname = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    availableQuantity = rs.getInt("quantity");
                    price = rs.getInt("price");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
            return;
        }

        if (availableQuantity >= quantity) {
            int totalPrice = price * quantity;
            outputTextArea.setText("Purchase successful!\nProduct: " + productName + "\nPrice per unit: $" + price +
                    "\nQuantity Purchased: " + quantity + "\nTotal Price: $" + totalPrice);

            int updatedQuantity = availableQuantity - quantity;
            updateDatabase(selectedMarket, productName, updatedQuantity);

            updateAvailableQuantities(selectedMarket);
        } else {
            outputTextArea.setText("Sorry, the product is out of stock.");
        }
    }

    private void processSellRequest(String productName, int quantity, String selectedMarket) {
        int availableQuantity = 0;
        int price = 0;
        String query = "SELECT quantity, price FROM " + selectedMarket + " WHERE productname = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    availableQuantity = rs.getInt("quantity");
                    price = rs.getInt("price");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
            return;
        }

        if (availableQuantity >= quantity) {
            int totalPrice = price * quantity;
            outputTextArea.setText("Sale successful!\nProduct: " + productName + "\nPrice per unit: $" + price +
                    "\nQuantity Sold: " + quantity + "\nTotal Price: $" + totalPrice);

            int updatedQuantity = availableQuantity + quantity; // Corrected the logic for selling
            updateDatabase(selectedMarket, productName, updatedQuantity);

            updateAvailableQuantities(selectedMarket);
        } else {
            outputTextArea.setText("Sorry, you do not have enough quantity to sell.");
        }
    }

    private void updateDatabase(String market, String productName, int newQuantity) {
        String updateQuery = "UPDATE " + market + " SET quantity = ? WHERE productname = ?";
        try (PreparedStatement ps = conn.prepareStatement(updateQuery)) {
            ps.setInt(1, newQuantity);
            ps.setString(2, productName);
            ps.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
        }
    }

    private void checkAvailability(String productName, String selectedMarket) {
        String query = "SELECT quantity FROM " + selectedMarket + " WHERE productname = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int availableQuantity = rs.getInt("quantity");
                    outputTextArea.setText("Availability for " + productName + " in " + selectedMarket + ": " + availableQuantity);
                } else {
                    outputTextArea.setText("Product not found in the selected market.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
        }
    }

    private void checkPrice(String productName, String selectedMarket) {
        String query = "SELECT price FROM " + selectedMarket + " WHERE productname = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int price = rs.getInt("price");
                    outputTextArea.setText("Price for " + productName + " in " + selectedMarket + ": $" + price);
                } else {
                    outputTextArea.setText("Product not found in the selected market.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
        }
    }

    private void checkMarket(String productName, String selectedMarket) {
        outputTextArea.setText("Selected market for " + productName + ": " + selectedMarket);
    }

    private void checkQuantity(String productName, String selectedMarket) {
        String query = "SELECT quantity FROM " + selectedMarket + " WHERE productname = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setString(1, productName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    int quantity = rs.getInt("quantity");
                    outputTextArea.setText("Quantity for " + productName + " in " + selectedMarket + ": " + quantity);
                } else {
                    outputTextArea.setText("Product not found in the selected market.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
        }
    }

    private void checkStock(String selectedMarket) {
        String query = "SELECT productname, quantity FROM " + selectedMarket;
        StringBuilder stockText = new StringBuilder("Stock for " + selectedMarket + ":\n");

        try (PreparedStatement ps = conn.prepareStatement(query);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                String productName = rs.getString("productname");
                int quantity = rs.getInt("quantity");
                stockText.append(productName).append(": ").append(quantity).append("\n");
            }
            outputTextArea.setText(stockText.toString());
        } catch (SQLException e) {
            e.printStackTrace();
            outputTextArea.setText("Database error: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new MarketApp();
            }
        });
    }
}
